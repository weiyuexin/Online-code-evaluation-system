import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.io.*;

public class JavaCompilerExample {
    public static void main(String[] args) {
        try {
            // 1. 编写需要动态编译的Java代码
            String sourceCode = "public class Hello { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }";

            // 2. 使用Java Compiler API实现编译器，编译Java代码
            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
            // 设置编译参数和输出目录
            String[] compilationOptions = new String[] { "-d", "./bin" };
            // 获取文件管理器
            StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
            // 创建临时Java文件
            File tempFile = File.createTempFile("Hello", ".java");
            FileWriter writer = new FileWriter(tempFile);
            writer.write(sourceCode);
            writer.close();
            // 指定编译文件
            Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjects(tempFile);
            // 编译Java代码
            Boolean result = compiler.getTask(null, fileManager, null, null, null, compilationUnits).call();
            if (result == true) {
                // 如果编译成功，则使用Java Runtime API运行已编译的Java程序
                Process process = Runtime.getRuntime().exec("java -cp ./bin Hello");
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                }
                reader.close();
            } else {
                // 如果编译不成功，则输出错误信息
                System.out.println("Compilation Error!");
            }
            // 关闭文件管理器
            fileManager.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class RunJava {
    public static void main(String[] args) {
        String javaFileName = "Hello.java"; // 要编译的Java文件名
        String className = "Hello"; // 编译后生成的类名
        String command = "javac " + javaFileName; // 编译Java文件的命令
        try {
            Process process = Runtime.getRuntime().exec(command); // 执行编译Java文件的命令
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                System.out.println(line); // 输出编译过程中的错误信息
            }
            process.waitFor(); // 等待编译完成
            command = "java " + className; // 执行Java类的命令
            process = Runtime.getRuntime().exec(command); // 执行Java类的命令
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while ((line = reader.readLine()) != null) {
                System.out.println(line); // 输出Java类的运行结果
            }
            process.waitFor(); // 等待Java类运行完毕
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CompilerRunner {

    public static void main(String[] args) {

        //定义Java文件名和类名
        String fileName = "Test.java";
        String className = "Test";

        //定义源代码路径和编译后的class文件路径
        Path sourcePath = Paths.get(".", fileName);
        Path targetPath = Paths.get(".", className + ".class");

        //编译Java文件
        if (compileJavaFile(sourcePath)) {
            //运行编译后的class文件
            runJavaClass(className);
        } else {
            System.err.println("编译Java文件失败！");
        }

    }

    /**
     * 编译Java文件
     */
    private static boolean compileJavaFile(Path sourcePath) {
        try {
            //构建编译Java文件的命令行参数
            List<String> commandList = new ArrayList<>();
            commandList.add("javac");
            commandList.add(sourcePath.toString());

            //通过ProcessBuilder类启动外部进程执行命令
            ProcessBuilder processBuilder = new ProcessBuilder(commandList);
            Process process = processBuilder.start();

            //等待进程执行完毕
            int exitCode = process.waitFor();

            //检查进程是否执行成功
            return (exitCode == 0);

        } catch (IOException | InterruptedException e) {
            System.err.println("编译Java文件出现异常：" + e.getMessage());
            return false;
        }
    }

    /**
     * 运行Java类
     */
    private static void runJavaClass(String className) {
        try {
            //构建运行Java类的命令行参数
            List<String> commandList = new ArrayList<>();
            commandList.add("java");
            commandList.add(className);

            //通过ProcessBuilder类启动外部进程执行命令
            ProcessBuilder processBuilder = new ProcessBuilder(commandList);
            Process process = processBuilder.start();

            //将进程的标准输出流输出到控制台
            process.getInputStream().transferTo(System.out);

            //等待进程执行完毕
            int exitCode = process.waitFor();

            //检查进程是否执行成功
            if (exitCode != 0) {
                System.err.println("运行Java类出错，退出码：" + exitCode);
            }

        } catch (IOException | InterruptedException e) {
            System.err.println("运行Java类出现异常：" + e.getMessage());
        }
    }

}

